__NUXT_JSONP__("/blog/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw){return {data:[{article:{slug:Z,description:"JavaScript 原始类型和对象类型",title:Z,img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1617038797996-ec58f390875b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80",alt:Z,tags:[_],toc:[{id:af,depth:$,text:ag},{id:S,depth:$,text:S},{id:H,depth:aa,text:H},{id:T,depth:$,text:T},{id:ah,depth:aa,text:H},{id:U,depth:aa,text:U}],body:{type:"root",children:[{type:b,tag:ab,props:{id:af},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#javascript-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:ag}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"在 JS 中，数据类型分为原始类型和对象类型。\n"},{type:b,tag:"img",props:{alt:"",src:"\u002Fimg\u002F%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B_0.png"},children:[]}]},{type:a,value:f},{type:b,tag:ab,props:{id:S},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:S}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"原始类型的值无法更改。比如我们想更改数值和布尔，这本身就说不通。但对于字符串来说，它们看起来是由字符组成的数组，所以想当然的会期望通过指定索引来修改字符串中的字符，实际上这是做不到的。我们来看一下这段代码："}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F 'use strict';"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'a'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F abc"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"想把字符串中的第二个字符改为 a ，但实际输出还是 abc 。如果是严格模式，还会报语法错误。大家以后会感觉到，严格模式很多时候就是用来阻止这种看似正常，实际却是有问题的行为的。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"字符串中的所有方法返回的都是一个新的字符串，并不会修改原来的字符串。我们来看一下这段代码："}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" s "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'ABC'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\ns"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:"toLowerCase"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"''"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"s"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F 'ABC'"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"比如我们声明了一个变量 ABC ，它是大写的。然后我们调用 toLowerCase 把它转成小写，最后输出的 s 还是大写的 ABC ，它并不会修改原来字符串的值。"}]},{type:a,value:f},{type:b,tag:ac,props:{id:H},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:H}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"比较原始类型是否相等，是比较它们的值。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"原始类型的比较是值的比较，只有它们的值相等，它们才相等。"}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" n1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:am}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" n2 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,an,v]},children:[{type:a,value:"Number"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:am}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"n1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Q}]},{type:a,value:" n2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ao}]},{type:a,value:"\n\n"},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" s1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" s2 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,an,v]},children:[{type:a,value:"String"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"'ab c'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"s1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Q}]},{type:a,value:" s2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ad}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"上面这段代码，变量 n1 和 n2 它们的值都是 123 ，所以它们是相等的。如果是比较两个字符串是否相等，当且仅当它们的长度相等，并且每个索引的字符都相等时，它们才相等。变量 s1 的值是 abc ，s2 的值是 ab(空格)c ，所以它们是不相等的。"}]},{type:a,value:f},{type:b,tag:ab,props:{id:T},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:T}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"对象类型的值是可以修改的。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:ap}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" o "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:V}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:N}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ae}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F {x: 2, y: 3}"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"delete"}]},{type:a,value:" o"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:ar},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F {y: 3}"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"我们定义了一个对象 o ，它有一个属性 x ，它的值是 1 。我们可以修改 x 的值，把它改成 2 ，也可以添加另外的属性比如说 y ，我们也可以把 x 属性删除。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"比如数组，我们可以通过索引来修改相应位置的值："}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:P}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F [1, 4, 3]"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:ac,props:{id:ah},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83-1",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:H}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"比较对象是否相等，不是比较它们的值。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"对象类型的比较并不是按值比较的，即使两个对象完全一样，或者是元素完全一样的数组，它们都是不相等的。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"记住，没有两个对象是相等的。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"比如，我们来看一下这段代码："}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:V}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:V}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:" a1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:" a2 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Q}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ad}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"a1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Q}]},{type:a,value:" a2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ad}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"o1 是一个对象，它有一个属性 x ，它的值是 1 ，o2 也是一样的。比如还有两个变量 a1 和 a2 这两个数组，它们的元素都是 1 2 3 。但是，o1 o2 不相等，a1 a2 也不相等。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"那对象类型是如何比较相等的呢？下面我们就来讨论这个问题。"}]},{type:a,value:f},{type:b,tag:ac,props:{id:U},children:[{type:b,tag:z,props:{ariaHidden:I,href:"#%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E5%AD%97",tabIndex:J},children:[{type:b,tag:c,props:{className:[K,L]},children:[]}]},{type:a,value:U}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"对象类型又叫引用类型（reference type），当给一个变量赋值为对象时，该变量保存的是该对象在内存中的地址。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"对象的比较是在比较引用地址：当且仅当它们引用的是同一个对象时，（意味着它们的值都是一样的，也就是都是这个对象的内存地址）它们才相等。"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:ap}]},{type:a,value:f},{type:b,tag:B,props:{className:[C]},children:[{type:b,tag:D,props:{className:[E,F]},children:[{type:b,tag:G,props:{},children:[{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:V}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:t}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" o1"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\no2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ae}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"o1"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"\u002F\u002F 2"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m,v]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,w,u,o]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Q}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ao}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"将只有一个 x 属性的对象赋值给变量 o1 ，那只是把这个对象在内存中的地址赋给了这个变量，此时再将 o1 赋值给变量 o2 ，o2 的值也是 o1 所引用对象的内存地址，它们俩指向的是同一个对象。此时，如果修改了 o2 ，其实就是在修改内存中的对象({x: 1})，因为 o1 也指向的是这个对象，所以 o1.y 的值也是 2."}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002F原始类型和对象类型",extension:".md",createdAt:"2021-05-11T06:19:39.200Z",updatedAt:"2021-05-11T07:53:48.082Z"},tags:{javascript:{slug:_,name:_}},prev:null,next:{slug:aw,title:aw}}],fetch:[],mutations:void 0}}("text","element","span","token","punctuation","\n"," ",";","operator","p","number","=","console",".","property-access","(",")","keyword","comment","var","function","class-name","method","1","log","a",",","div","nuxt-content-highlight","pre","language-js","line-numbers","code","相等比较","true",-1,"icon","icon-link","string","x","[","]","===","2","原始类型","对象类型","另一个名字","{",":","}","3","原始类型和对象类型","javascript",2,3,"h2","h3","\u002F\u002F false","y","javascript-的数据类型","JavaScript 的数据类型","相等比较-1"," a ","'abc'","\na","alert","123","known-class-name","\u002F\u002F true","比如下面这段代码：","\no","o"," o1 "," o2 ","o1 "," o2","闭包")));
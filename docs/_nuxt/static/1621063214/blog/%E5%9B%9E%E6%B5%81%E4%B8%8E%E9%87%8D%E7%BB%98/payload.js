__NUXT_JSONP__("/blog/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{article:{slug:i,description:"合并 JS 数组的几种方法",title:i,img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1534082753658-1dcb40af5719?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjA4fHxjb2xvciUyMGJsb2NrfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",alt:i,tags:[j,k],toc:[{id:g,depth:l,text:g},{id:u,depth:l,text:v},{id:h,depth:l,text:h}],body:{type:"root",children:[{type:c,tag:d,props:{},children:[{type:a,value:"听大佬做技术分享的时候就听说过回流与重绘这两个词，之后搜集了几篇文章大概了解了一下，做一下记录。"}]},{type:a,value:b},{type:c,tag:m,props:{id:g},children:[{type:c,tag:n,props:{ariaHidden:o,href:"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E4%B8%BB%E8%A6%81%E6%B5%81%E7%A8%8B",tabIndex:p},children:[{type:c,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:g}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"不同浏览器内核不同，所以渲染过程不太一样。"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"WebKit 主流程："}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:c,tag:w,props:{alt:"WebKit内核渲染过程",src:"\u002Fimg\u002FWebKit%E5%86%85%E6%A0%B8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png"},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"Mozilla 的 Gecko 主流程："}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:c,tag:w,props:{alt:"Gecko内核渲染过程",src:"\u002Fimg\u002FGecko%E5%86%85%E6%A0%B8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png"},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"由上面两张图可以看出，虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。所以可以分析出基本过程："}]},{type:a,value:b},{type:c,tag:t,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"HTML 解析出 DOM Tree"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"浏览器把获取到的 HTML 代码解析成一颗 DOM 树，HTML 中的每个标签（tag）都是 DOM 树中的一个节点，根节点就是我们常用的 document 对象。DOM 树里包含了 HTML 所有标签，包括 display: none 隐藏的和 JS 动态添加的元素等。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"CSS 解析出 Style Rules"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"浏览器把所有样式（用户定义的 css 和用户代理）解析成样式结构体，在解析过程中会去掉浏览器不能识别的样式，比如 IE 会去掉 -moz- 开头的样式，而 Firefox 会去掉 _ 开头的样式。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"将二者关联生成 Render Tree"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"DOM 树和样式结构体组合后构建 Render Tree（渲染树），Render Tree 类似于 DOM 树，但区别很大，Render Tree 能识别样式，Render Tree 的每一个节点都有自己的样式，而且 Render Tree 中不包含隐藏的节点（比如 display: none 的节点，还有 head 节点），因为这些节点不会用于呈现，而且不会影响呈现。"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{style:x},children:[{type:a,value:"注意：visibility: hidden 隐藏的元素还是会包含到 Render Tree 中，因为 visibility: hidden 会影响布局（layout），会占有空间。根据 CSS2 的标准，Render Tree 中的每个节点都称为 Box（Box demensions），理解页面元素为一个具有填充、边框、边距和位置的盒子。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"根据 Render Tree 计算每个节点的信息"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"渲染树的每个元素包含的内容都是计算过的，它被称之为布局 Layout。浏览器使用一种流式处理的方法，只需要一次 pass 绘制操作就可以布局所有的元素。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"根据计算好的信息绘制整个页面"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"将渲染树的各个节点绘制到屏幕上，这一步被称为绘制 Painting。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:m,props:{id:u},children:[{type:c,tag:n,props:{ariaHidden:o,href:"#%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%EF%BC%88reflow-%E5%92%8C-repaint%EF%BC%89",tabIndex:p},children:[{type:c,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:v}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念:"}]},{type:a,value:b},{type:c,tag:"ul",props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"reflow（回流）：当浏览器发现某个部分发生了变化从而影响了布局，这个时候就需要倒回去重新渲染，大家称这个回退的过程叫 reflow。 常见的reflow是一些会影响页面布局的操作，诸如Tab，隐藏等。reflow 会从 html 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。reflow几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会reflow哪一部分的代码，因为他们会相互影响。"},{type:c,tag:f,props:{},children:[]}]},{type:a,value:"\n "},{type:c,tag:d,props:{style:x},children:[{type:a,value:"注意：回流必将引起重绘，但重绘不一定引起回流。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"repaint（重绘）： repaint则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"需要注意的是，display:none 会触发 reflow，而visibility: hidden属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框，这在我们上面有提到过。所以 visibility:hidden 只会触发 repaint，因为没有发生位置变化。"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"我们不能避免reflow，但还是能通过一些操作来减少回流："}]},{type:a,value:b},{type:c,tag:t,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:"用transform做形变和位移."}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:"通过绝对位移来脱离当前层叠上下文，形成新的Render Layer。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"另外有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。但是在有些情况下，比如 resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。"}]},{type:a,value:b},{type:c,tag:m,props:{id:h},children:[{type:c,tag:n,props:{ariaHidden:o,href:"#%E8%A7%A6%E5%8F%91%E5%9B%9E%E6%B5%81",tabIndex:p},children:[{type:c,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:h}]},{type:a,value:b},{type:c,tag:t,props:{start:0},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"页面渲染初始化"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"调整窗口大小（Resizing the window）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"改变字体（changing the font）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"增加或移除样式表（adding or removing a stylesheet）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"内容变化，比如用户在 input 输入框中输入文字（content changes, such as a user typing text in an input box）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"激活 css 伪类，比如：hover（IE 中为兄弟节点伪类的激活）（activation of css pseudo classes such as :hover (in IE the activation of the pseduo class of a silibing)）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"操作 class 属性（manipulationg the class attribute）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"脚本操作 DOM（a sctipt manipulation the DOM）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"计算 offsetWidth 和 offsetHeight 属性（calculating offsetWidth and offsetHeight）"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"设置 style 属性的值（setting a property of the style attribute）"}]},{type:a,value:b}]},{type:a,value:b}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002F回流与重绘",extension:".md",createdAt:"2021-05-15T07:05:40.618Z",updatedAt:"2021-05-15T07:18:17.856Z"},tags:{browser:{slug:k,name:k},css:{slug:j,name:j}},prev:{slug:y,title:y},next:null}],fetch:[],mutations:void 0}}("text","\n","element","p","li","br","浏览器渲染主要流程","触发回流","回流与重绘","css","browser",2,"h2","a","true",-1,"span","icon","icon-link","ol","回流和重绘（reflow-和-repaint）","回流和重绘（reflow 和 repaint）","img","color:#F56C6C;","复制对象")));
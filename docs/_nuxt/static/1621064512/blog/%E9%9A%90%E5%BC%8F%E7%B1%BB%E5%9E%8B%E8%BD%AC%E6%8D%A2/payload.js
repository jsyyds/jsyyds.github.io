__NUXT_JSONP__("/blog/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU){return {data:[{article:{slug:ar,description:"JavaScript 的隐式类型转换是个大坑！",title:ar,img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1620421680906-275860f61e27?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyNnx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=60",alt:ar,tags:[as],toc:[{id:$,depth:at,text:$},{id:aa,depth:at,text:aa},{id:ab,depth:at,text:ab},{id:ac,depth:ad,text:ac},{id:aA,depth:ad,text:aB},{id:aC,depth:ad,text:aD},{id:ae,depth:ad,text:ae}],body:{type:"root",children:[{type:b,tag:au,props:{id:$},children:[{type:b,tag:O,props:{href:"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%BB%8B%E7%BB%8D",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:$}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"在 JS 中，当运算符在运算时，如果两边数据不统一，CPU 就无法计算，这时我们编译器会自动将运算符两边的数据做一个数据类型转换，转成一样的数据类型再计算。这种无需手动转换，而由编译器自动转换的方式就称为"},{type:b,tag:N,props:{},children:[{type:a,value:"隐式转换"}]},{type:a,value:"。"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"例如："},{type:b,tag:A,props:{},children:[{type:a,value:"1 \u003E \"0\""}]},{type:a,value:" 这行代码在 JS 中并不会报错，编译器在运算时会先把右边的 \"0\" 转换成数字 0 再比较大小。"}]},{type:a,value:e},{type:b,tag:au,props:{id:aa},children:[{type:b,tag:O,props:{href:"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:aa}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"转成 string 类型："}]},{type:a,value:e},{type:b,tag:ag,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:"字符串连接符：+"}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"转成 number 类型："}]},{type:a,value:e},{type:b,tag:ag,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"自增自减运算符：++、--"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"算术运算符：+、-、*、\u002F、%"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"关系运算符：\u003E、\u003C、\u003E=、\u003C=、==、!=、===、!=="}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"转成 boolean 类型："}]},{type:a,value:e},{type:b,tag:ag,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:"逻辑非运算符：!"}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:au,props:{id:ab},children:[{type:b,tag:O,props:{href:"#%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%9D%91%E6%80%BB%E6%B1%87",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:ab}]},{type:a,value:e},{type:b,tag:ah,props:{id:ac},children:[{type:b,tag:O,props:{href:"#%E7%AC%AC%E4%B8%80%E5%9D%91%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E7%AC%A6%E4%B8%8E%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%E6%B7%B7%E6%B7%86",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:ac}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aE}]}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,P]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,Q,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 扩充部分"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:av}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"\"1true\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:_}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"\"\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aw}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aj}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"此类问题的坑是：将字符串连接符（只要 + 号两边有一边是字符串）与算术运算符（+ 号两边都不是类字符串）的隐式转换搞混淆。"}]},{type:a,value:e},{type:b,tag:ag,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"字符串运算符：会把其他数据类型调用 String() 方法转成字符串然后拼接。"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"算术运算符：会把其他数据类型调用 Number() 方法转成数字然后做加法计算。"}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F + 是字符串连接符"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F String(1) + \"true\" -\u003E \"1\" + \"true\" -\u003E \"1true\""}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ax}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 1 + Number(true) -\u003E 1 + 1 -\u003E 2"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,P]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ax}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 1 + Number(undefined) -\u003E 1 + NaN -\u003E NaN"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,Q,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:ax}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 1 + Nubmer(null) -\u003E 1 + 0 -\u003E 1"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:"扩充部分"}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"先谈谈为什么会有这种问题，这是因为js的弱类型导致的，js的弱类型，导致js的隐式类型转换频繁。比如像 {} + []，[] + {}，你完全不能去预测它的类型。"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"先来看一条在js里的隐式的 rule，js在进行加法运算的时候， 会先推测两个操作数是不是number。\n如果是，则直接相加得出结果。\n如果其中有一个操作数为string，则将另一个操作数隐式的转换为string，然后进行字符串拼接得出结果。\n如果操作数为对象或者是数组这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接\n如果操作数是像boolean这种的简单数据类型，那么就将操作数转换为number相加得出结果"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"知道了这些规则的话就简单多了"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"先来看第一个[] + []，这是两个复杂数据结构相加的例子，按照上面的rule，我们先将两个操作数转换为string，然后进行拼接，于是"}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F [] -\u003E \"\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F \"\" + \"\" -\u003E \"\""}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"再看第二个 [] + {}，和第一个是类似的。"}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F [] -\u003E \"\"， {} -\u003E \"[object Object]\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F \"\" + \"[object Object]\" -\u003E \"[object Object]\""}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"再来看第三个 {} + []，这也是两个复杂数据结构相加的例子，看样子与前两个没有什么差别，按理说也应该是 \"[object Object]\"，但是你相加的时候你会发现，得出的答案是 0！"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"这是为什么呢？"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"原因是有的js解释器会将开头的 {} 看作一个代码块，而不是一个js对象，于是真正参与运算的是 + []，就是将 [] 转换为number，于是得出答案 0。"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"那么我们如何证明{}被看作一个代码块而不是一个js对象呢？很简单，我们可以在{}里写上一些语句，比如"}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"'hello'"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F hello"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 0"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:ah,props:{id:aA},children:[{type:b,tag:O,props:{href:"#%E7%AC%AC%E4%BA%8C%E5%9D%91%EF%BC%9A%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%9A%E6%8A%8A%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%88%90-number-%E4%B9%8B%E5%90%8E%E5%9C%A8%E6%AF%94%E8%BE%83%E5%85%B3%E7%B3%BB",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:aB}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aE}]}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aJ}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:_}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,F,P]},children:[{type:a,value:ai}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,Q,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:av}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F WTF"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F ??"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F ????????"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aj}]}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"当关系运算符两边有一边是字符串的时候，会将其他数据类型使用 Number() 转换，然后比较关系。"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"当关系运算符两边都是字符串的时候，此时同时转换成 number 然后比较关系。"},{type:b,tag:N,props:{},children:[{type:a,value:"重点：此时并不是按照 Number() 的形式转成数字，二是按照字符串对应的 unicode 编码来转成数字。"}]}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F Number(\"2\") \u003E 10 -\u003E 2 \u003E 10 -\u003E false"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 使用 charCodeAt() 方法可以查看字符的 unicode 编码，默认返回字符串中第一个字符的编码，如果想要查询第二个字符可以传参下标"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F \"2\".charCodeAt() \u003E \"1\".charCodeAt() -\u003E 50 \u003E 49 = true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 多个字符从左往右依次比较"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 先比较 'a' 和 'b'，不等，则直接得出结果"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 'a'.charCodeAt() \u003E 'b'.charCodeAt() -\u003E 97 \u003E 98 -\u003E false"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aJ}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:R}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 先比较 'a' 和 'a'，两者相等，继续比较第二个字符 'c' 和 'b‘，得出结果"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 特殊情况：NaN 与任何数据相比都是 NaN，包括自己"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:_}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F false"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 特殊情况：如果数据类型是 undefined 和 null，得出固定的结果"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,F,P]},children:[{type:a,value:ai}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F,Q,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F true"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:ah,props:{id:aC},children:[{type:b,tag:O,props:{href:"#%E7%AC%AC%E4%B8%89%E5%9D%91%EF%BC%9A%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9C%A8%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%97%B6%E4%BC%9A%E5%85%88%E8%BD%AC%E6%88%90-string%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E8%BD%AC%E6%88%90-number-%E8%BF%90%E7%AE%97",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:aD}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:an}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aL}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,F,az]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 如何完善 a，使其正确打印 1"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aj}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"引用数据类型隐式转换顺序如下："}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:"先使用 valueOf() 方法获取其原始值，如果原始值不是 number 类型，则使用 toString() 方法转成 string。"}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:"再将 string 转成 number 运算。"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"ps: Date 类型先调用 toString() 再调用 valueOf()。"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"可以参考"},{type:b,tag:aO,props:{to:"\u002Fblog\u002F%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6(==)%E8%AF%A6%E8%A7%A3"},children:[{type:a,value:"《相等运算符(==)详解》"}]},{type:a,value:"中关于 ToPrimitive() 方法的解释。"}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"注意，空数组的 toString() 方法会得到空字符串，而空对象的 toString() 方法会得到字符串"},{type:b,tag:A,props:{},children:[{type:a,value:"[object Object]"}]},{type:a,value:" （注意第一个小写o，第二个大写O哟）"}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ay}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 先将左边数组转成 string，然后右边也是 string，则转成 unicode 编码运算"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F [1,2].valueOf() -\u003E [1,2]"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F [1,2].toString() -\u003E '1,2'"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F '1,2' == '1,2' -\u003E true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:an}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F a.valueOf().toString() -\u003E \"[object Object]\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F \"[object Object]\" == \"[object Object]\" -\u003E true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:an}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aL}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 分析：逻辑与 && 运算一假则假，要想 if 分支语句小括号条件成立，则必需要让 a 的值同时等于 1 且等于 2 且等于 3."}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 乍看之下，好像根本不可能实现，但是引用类型隐式转换时会先调用 valueOf() 方法，然后转成 number 运算。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 而对象的 valueOf() 方法是可以重写的"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:an}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ao}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:a,value:"\n    i"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ay}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 声明一个属性 i"}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,"function-variable",n]},children:[{type:a,value:"valueOf"}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:a,value:"\n        "},{type:b,tag:c,props:{className:[d,F,az]},children:[{type:a,value:"return"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"++"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"i"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 每调用一次，让对象 a 的 i 属性自增一次并返回"}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,F,az]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:L}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ap}]},{type:a,value:S},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 每一次运算时都会调用一次 a 的 valueOf() 方法"}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"'1'"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:ah,props:{id:ae},children:[{type:b,tag:O,props:{href:"#%E7%AC%AC%E5%9B%9B%E5%9D%91%EF%BC%9A%E9%80%BB%E8%BE%91%E9%9D%9E%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%90%9E%E6%B7%B7%E6%B7%86",ariaHidden:z,tabIndex:T},children:[{type:b,tag:c,props:{className:[U,V]},children:[]}]},{type:a,value:ae}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:"前方高能，请注意~"}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:"常见面试题"}]}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 小龙坑"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 大龙坑"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 陨石坑"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:av}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,E]},children:[{type:a,value:X}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:m,props:{},children:[{type:b,tag:N,props:{},children:[{type:a,value:aj}]}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"关系运算符：将其他数据类型转成数字"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"逻辑非：将其他数据类型使用 Boolean() 转成布尔类型，转换结果参考 "},{type:b,tag:aO,props:{to:"\u002Fblog\u002FJavaScript_%E4%B8%AD%E7%9A%84%E5%A5%87%E8%91%A9%E5%81%87%E5%80%BC"},children:[{type:a,value:"《JavaScript 中奇葩的假值》"}]}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:B,props:{},children:[{type:a,value:e},{type:b,tag:m,props:{},children:[{type:a,value:"引用类型数据存在堆中，栈中存储的事地址"}]},{type:a,value:e}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:G,props:{className:[H]},children:[{type:b,tag:I,props:{className:[J,K]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:aQ}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F Number('') == 0 -\u003E 0 == 0 -\u003E true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:W}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 本质是 ![] 逻辑非表达式结果与 0 比较关系"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 逻辑非优先级高于关系运算符 ![] -\u003E false"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F Number(false) == 0 -\u003E 0 == 0 -\u003E true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 本质是空数组 [] 与 ![] 逻辑非表达式结果鳔胶关系"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F ![] -\u003E false"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:aQ}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F Number('') == Number(false) -\u003E 0 == 0 -\u003E true"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:x}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:aR}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F 本质是空对象 {} 与 !{} 逻辑非表达式结果比较关系"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F ｛｝.valueOf().toString() -\u003E '[object Object]'"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F !{} -\u003E false"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:"\u002F\u002F Number('[object Object]') == Number(false) -\u003E NaN == 0 -\u003E false"}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,h,q]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,r,n,p]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:v}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:aR}]},{type:a,value:e}]}]}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002F隐式类型转换",extension:".md",createdAt:aS,updatedAt:aS},tags:{javascript:{slug:as,name:as}},prev:{slug:aT,title:aT},next:{slug:aU,title:aU}}],fetch:[],mutations:void 0}}("text","element","span","token","\n","punctuation"," ","console","operator","comment","(",")","p","function",".","property-access","class-name","method","log","number","string","==","\n\n","[","]","true","code","li","{","}","boolean","keyword","div","nuxt-content-highlight","pre","language-js","line-numbers","1","+","strong","a","nil","null","\u003E"," a ",-1,"icon","icon-link","0","false","!","2","NaN","隐式转换介绍","隐式转换规则","面试大坑总汇","第一坑：字符串连接符与算术运算符隐式转换规则混淆",3,"第四坑：逻辑非隐式转换与关系运算符隐式转换搞混淆","ol","ul","h3","undefined","原理分析","\"2\"","\"abc\"","a ","var","=","&&","\n    ","隐式类型转换","javascript",2,"h2","答案：","\"[object Object]\"","\u002F\u002F + 是算术运算符",",","control-flow","第二坑：关系运算符会把其他数据类型转换成-number-之后在比较关系","第二坑：关系运算符会把其他数据类型转换成 number 之后在比较关系","第三坑：引用数据类型在隐式转换时会先转成-string，然后再转成-number-运算","第三坑：引用数据类型在隐式转换时会先转成 String，然后再转成 Number 运算","常见面试题如下","\"true\"","10","\"10\"","\"b\"","\"acb\"","'1,2'","'???'","if","3","nuxt-link",":","\u002F\u002F [].valueOf().toString() -\u003E ''","\u002F\u002F 本质是栈中存储的地址相比较，所以是 false","2021-05-15T06:32:21.743Z","闭包","复制对象")));
__NUXT_JSONP__("/blog/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$){return {data:[{article:{slug:ao,description:"奇葩，理解为什么要出 TypeScript 了...",title:ao,img:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1535231540604-72e8fbaf8cdb?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dHJhbnNmb3JtYXRpb258ZW58MHx8MHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",alt:ao,tags:[ap],toc:[{id:$,depth:L,text:$},{id:aa,depth:L,text:aa},{id:aC,depth:L,text:aD},{id:ab,depth:L,text:ab},{id:ac,depth:L,text:ac},{id:ad,depth:L,text:ad},{id:ae,depth:L,text:ae},{id:af,depth:L,text:af}],body:{type:"root",children:[{type:b,tag:M,props:{id:$},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E7%AC%94%E8%AF%95%E9%A2%98",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:$}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"笔试中经常会考察一些类型转换的问题，比如下面这段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:"b"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"大家可以先猜一下答案是什么，然后再试验一下。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"大家可能觉得这题比较简单，那我们再来看一下下面这道题："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:J}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:" c "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,p,U,V]},children:[{type:a,value:U}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,p,V]},children:[{type:a,value:aq}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:" e "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:as}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:" b"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:" c"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:" e"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"大家可以再猜一下答案是什么。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"知道答案后呢，大家可能觉得 JS 比较乱，根本没有章法可循。其实这些场景呢，在 ES 的规范中都是有明确的说明的，下面我们先来看一些常见的类型转换场景。"}]},{type:a,value:f},{type:b,tag:M,props:{id:aa},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%9C%BA%E6%99%AF",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:aa}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们先来看一下转为字符串的场景，它经常出现在 + 运算符中，这个 + 不是数学中的 + ，它是指字符串连接，并且其中有一个操作数不是数值类型。比如说下面这段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"4"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'px'"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"5"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 4px5"}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"123e-2"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'a'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 1.23a"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们声明了一个变量 s 等于 4 + ‘px' + 5 ，其中，有一个操作数不是数值类型，就是这个 'px' ，所以它的结果是一个字符串，就是把它们连接起来 4px5 。再看下面这个，123e-1 这也是一个数字，一个科学计数法的数字，跟 'a' 进行相加，结果也是一个字符串。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们再来看一下转为数值的场景，它经常出现在数学运算中，表示连接字符串的 + 运算符除外。比如下面这段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F NaN NaN"}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"' 123 '"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 123 -123"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们声明了一个变量 s 等于 ‘abc' ，这里是 +s 和 -s ，这里的 + 不是连接的 + ，它是数学中的一元运算符 + ，最终会转成一个数值。我们把 s 等于 (空格)123(空格) ，它的结果也要转为数值。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"那我们再来看一下转为布尔的场景，它经常出现在 if 语句、逻辑运算中。比如下面这段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p,"control-flow"]},children:[{type:a,value:"if"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:au}]},{type:a,value:"\n    "},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F abc"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aj}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,z,q]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aN}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aN}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:au}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们声明了一个变量 s 等于 ‘abc' ，我们可以 if (s) ，如果 s 为真的话就可以输出来，这个时候呢这个 s 就会转成布尔。如果我们用两个感叹号取反再取反，也可以把它转为相应的布尔值。"}]},{type:a,value:f},{type:b,tag:M,props:{id:aC},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%9C%BA%E6%99%AF%EF%BC%9A%E7%9B%B8%E7%AD%89%E6%80%A7%EF%BC%88%EF%BC%89",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:aD}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"== 运算符会有类型转换，=== 运算符不会进行类型转换。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"这也是一类隐式转换的场景，就是在使用两个等号的运算符中，它也会进行类型转换。要注意的是，三个等号并不会做类型转换，这也是推荐的用法。如果没有什么特殊的要求的话，我们就要使用三个等号。一般不推荐使用两个等号。比如下面这段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,p,U,V]},children:[{type:a,value:U}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,p,V]},children:[{type:a,value:aq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 相等"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aO}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 在比较之前，字符串转换成数值"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aP}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 在比较之前，布尔转换成数值"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:aO}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ak}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 在比较之前，字符串和布尔都转换成数值"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"它们的结果都是 true ，null 和 undefined 如果是使用两个等号，它们是相等的。这个也是 ES 规范中明确说明的。如果是字符串 ’0‘ 和数值 0 ，进行比较，比较之前会将字符串转换成数值。如果是数值 0 和布尔值 false 进行比较，那布尔会转成数值。如果是字符串 ’0‘ 和 布尔值 false 比较，字符串和布尔值都要转换成数值再进行比较。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"大家可能觉得这么多的情况怎么可能记得住，在实际的工作当中呢，也会比较少，就是大家不要使用这两个等号就可以了。一般我们使用三个等号来比较。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"下面这张表是直接从 MDN 摘录下来的，大家可以参考一下：\n"},{type:b,tag:al,props:{alt:am,src:"\u002Fimg\u002F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2_0.png"},children:[]},{type:a,value:"\n比如我们这里就可以看到，Null 和 Undefined 比较的话，结果就是 true 。如果一个值是数值 Number ，另外一个是字符串 String ，会将字符串转换成 Number ，在进行比较。如果其中一个值是布尔类型的，另外一个值是 Number 类型的 ，需要把布尔类型的转换成 Number 类型再进行比较。如果是 true 的话就转换成 1 ，false 的话就转换成 0 。如果一个操作数是 Object 类型的，另外一个是 Nubmer 或者 String ，需要将 Object 转成原始类型再进行比较，对象转换成原始值的规则我们之后就会进行讨论的。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"下面我们来总结一下类型转换的规则。这张表是从 JS 权威指南上摘录下来的，我们一起来学习一下。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:b,tag:al,props:{alt:am,src:"\u002Fimg\u002F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2_1.png"},children:[]},{type:a,value:"\n比如，undefined 转换成字符串就是字符串的 ’undefined‘ ，转换成数值的话就是 NaN ，它不是一个数值类型，转换为布尔就是 false 。null 的话也是类似，有点区别的是 null 转换为数值的时候是 0 。true 和 false 转换为数值的话分别是 1 和 0 ，如果是空字符串转换为数值是 0 ，转换为布尔是 false 。有一些转换为对象的，就是这些使用构造函数的形式，这些是一些显式的转换，我们回来会介绍。如果是 '1.2' 这样的字符串，也可以转换为数值，就是浮点数 1.2 。如果字符串不是数值的字符串，它转换的结果就是 NaN 。\n"},{type:b,tag:al,props:{alt:am,src:"\u002Fimg\u002F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2_2.png"},children:[]},{type:a,value:"\n正 0 和负 0 转换为字符串都是 '0' ，特别要注意的就是 -0 转换出来的不是 '-0' ，它就是 '0'。其他情况跟前面比较类似。\n"},{type:b,tag:al,props:{alt:am,src:"\u002Fimg\u002F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2_3.png"},children:[]},{type:a,value:"\n如果是一个对象，它转为字符串，这个我们之后会来介绍，包括转换为数值，也会在后面介绍。这里说一下就是数组这个情况。如果是数组的话，如果是空数组，转换为字符串就是一个空字符串 '' ，转换为数值就是 0 ，这里要注意一下。如果只有一个元素并且是数值的，比如一个数组它只有一个元素 9 ，转换为字符串就是一个字符串的 '9' ，转换为数值就是数字 9 。如果是其他数组比如不是数值的或者有多个元素的，转换为字符串的结果就相当于调用了 join 方法，转换为数值就是 NaN ，因为它不是一个数字。如果是一个函数转为字符串，这个也会在之后进行介绍。"}]},{type:a,value:f},{type:b,tag:M,props:{id:ab},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:ab}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"在讨论对象转换为原始值之前，我们来看一下显式类型转换。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"显式类型转换，可以使代码变得清晰易读，推荐在实际编码中使用。最简单的方法就是使用 Boolean()、Number()、String() 和 Object() 函数。"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"比如下面一段代码："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:av}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:"'123'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 123"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aR}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:"Boolean"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:au}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:"Object"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"3"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 等价 new Number(3)"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"我们将一个字符串 '123' ，调用了 Number() 函数就变成了数值 123 。数值的 123 调用 String() 函数就变成了字符串 '123' 。空数组 [] 调用 Boolean() 函数结果就是 true 。Object(3) 和 new Number(3) 是等价的。"}]},{type:a,value:f},{type:b,tag:M,props:{id:ac},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9A%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:ac}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"还可以使用 toString() 方法，它的执行结果通常和 String() 方法一致。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aR}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:"toStirng"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 'false'"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"要注意的是 null 和 undefined 没有 toString() 方法，直接调用的话就会报错。这在实际开发当中也是经常会遇到的一个 BUG 。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,p,U,V]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aS}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,p,V]},children:[{type:a,value:aq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aS}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"Number 类型的 toString() 方法还支持第二个参数，指定要转换的进制。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:" n "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"20"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 转成二进制 \"10100\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"8"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 转成八进制 \"24\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"16"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F 转成十六进制 \"14\""}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"Number 类型转换为字符串还有三个方法：toFixed()、toExponential() 和 toPrecision() 。可以自己去查一下这些函数的功能，这里就不讨论了。"}]},{type:a,value:f},{type:b,tag:M,props:{id:ad},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9A%E8%BD%AC%E6%95%B0%E5%80%BC",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:ad}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"字符串类型转换为数值还有两个全局方法：parseInt() 和 parseFloat() 。"}]},{type:a,value:f},{type:b,tag:M,props:{id:ae},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:ae}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"三种转字符串的方法："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aT}]},{type:a,value:" value"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,B,n,C]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aU}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:"3."}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"第一种和第三种方法是一样的，但是第二种有点区别。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:aV}]}]}]},{type:a,value:f},{type:b,tag:ay,props:{},children:[{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"先调用 valueOf 方法，如果是原始值，则返回。"}]},{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"否则，调用 toStirng 方法，如果是原始值，则返回。"}]},{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:aW}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"第三种方法逻辑和第二种方法是一样的，只是它会优先调用 toString 方法。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:ay,props:{},children:[{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"先调用 toString 方法，如果值是原始值，则返回。"}]},{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"否则，调用 valueOf 方法，如果值是原始值，则返回。"}]},{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:aW}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"大家可以试一下下面这段代码，然后吧自定义的 valueOf 、toString 方法的注释挨个去掉，测试看一下结果。你也可以分别测试一下返回原始类型的值和返回对象类型的值，分别是什么样的一个结果。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aX}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F     return 12;"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aY}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:az}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"需要注意的是，Date 这个对象有点特殊，它始终都会调用 toString 方法。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F Date.prototype.valueOf = function () {"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aZ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"\u002F\u002F Date.prototype.toString = function () {"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:az}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:F}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"new"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"Date"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"d"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:Y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:M,props:{id:af},children:[{type:b,tag:G,props:{ariaHidden:J,href:"#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%95%B0%E5%80%BC",tabIndex:N},children:[{type:b,tag:c,props:{className:[O,P]},children:[]}]},{type:a,value:af}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"两种转数值的方法："}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aT}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:"value\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aU}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:av}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"它们的转换方法是一样的。"}]},{type:a,value:f},{type:b,tag:ay,props:{},children:[{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"先调用 valueOf 方法，如果值是原始值，则返回。"}]},{type:a,value:f},{type:b,tag:R,props:{},children:[{type:a,value:"否则，调用 toString 方法，将返回的值转换为数值。"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"和转字符串的示例代码一样，大家可以分别测试一下各种不同的情况。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[s]},children:[{type:b,tag:t,props:{className:[u,v]},children:[{type:b,tag:w,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aX}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aZ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:aY}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:az}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:W}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"var"}]},{type:a,value:" o "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:D}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ai}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:X}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,I,q]},children:[{type:a,value:av}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:y}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002F类型转换",extension:".md",createdAt:"2021-05-16T02:07:27.136Z",updatedAt:"2021-05-16T02:24:32.411Z"},tags:{javascript:{slug:ap,name:ap}},prev:{slug:a$,title:a$},next:null}],fetch:[],mutations:void 0}}("text","element","span","token","punctuation","\n"," ","operator","(",")",";","comment","p","function","number","keyword","class-name","div","nuxt-content-highlight","pre","language-js","line-numbers","code","string","+","console",".","method","property-access","=","alert","let","a",",","known-class-name","true","s",2,"h2",-1,"icon","icon-link","log","li","toString","1","null","nil","\u002F\u002F }",":","''","boolean","String","笔试题","类型转换场景","显式类型转换","显式类型转换：转字符串","显式类型转换：转数值","对象类型转字符串","对象类型转数值","-","false","{","}","==","img","","2","类型转换","javascript","undefined","[","]"," s ","\u002F\u002F true","Number","n","value","ol","\u002F\u002F     return 'abc';","x"," y","类型转换场景：相等性（）","类型转换场景：相等性（==）"," a ","'5'","'2'"," b ","\n\n"," d "," d","\ns ","'abc'","!","'0'","0","123","\u002F\u002F '123'","\u002F\u002F Error","1.","2."," value\n","否则，报错 TypeError 。","\u002F\u002F Object.prototype.valueOf = function () {","\u002F\u002F Object.prototype.toString = function () {","\u002F\u002F     return '123';","o","类型识别")));